{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useContext, createContext } from \"react\";\nimport France from \"@socialgouv/react-departements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEPARTEMENTS_ILE_DE_FRANCE = ['75',\n// Paris\n'77',\n// Seine-et-Marne\n'78',\n// Yvelines\n'91',\n// Essonne\n'92',\n// Hauts-de-Seine\n'93',\n// Seine-Saint-Denis\n'94',\n// Val-de-Marne\n'95' // Val-d'Oise\n];\nfunction App() {\n  _s();\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    poste: \"\",\n    ville: \"\",\n    departement: \"\"\n  });\n  const {\n    entreprises,\n    ajouterEntreprise\n  } = useEntreprises();\n  const detecterDepartement = async ville => {\n    try {\n      const response = await fetch(`https://geo.api.gouv.fr/communes?nom=${ville}&fields=nom,codeDepartement`);\n      const data = await response.json();\n      if (data.length > 0) {\n        const villeExacte = data.find(commune => commune.nom.toLowerCase() === ville.toLowerCase());\n        let departementCode = villeExacte ? villeExacte.codeDepartement : data[0].codeDepartement;\n\n        // Si le département est dans Paris ou petite couronne, \n        // retourner tous les départements d'Île-de-France\n        return ['75', '92', '93', '94'].includes(departementCode) ? DEPARTEMENTS_ILE_DE_FRANCE : departementCode;\n      }\n      return \"\";\n    } catch (error) {\n      console.error(\"Erreur lors de la détection du département :\", error);\n      return \"\";\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const departement = await detecterDepartement(formData.ville);\n    if (departement) {\n      const departements = Array.isArray(departement) ? departement : [departement];\n      const nouvelleEntreprise = {\n        nom: formData.nom,\n        poste: formData.poste,\n        ville: formData.ville,\n        departement: departements[0] // Garder le premier département pour l'affichage\n      };\n      ajouterEntreprise(nouvelleEntreprise);\n\n      // Réinitialiser le formulaire\n      setFormData({\n        nom: \"\",\n        poste: \"\",\n        ville: \"\",\n        departement: \"\"\n      });\n    } else {\n      alert(\"Impossible de détecter le département pour cette ville.\");\n    }\n  };\n\n  // Calcul du nombre d'entreprises par département\n  const entreprisesParDepartement = entreprises.reduce((acc, entreprise) => {\n    acc[entreprise.departement] = (acc[entreprise.departement] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Obtenir les départements uniques avec gestion spéciale pour l'Île-de-France\n  const departementsPourCarte = [...new Set(Object.keys(entreprisesParDepartement).flatMap(dept => ['75', '92', '93', '94'].includes(dept) ? DEPARTEMENTS_ILE_DE_FRANCE : [dept]))];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ma carte interactive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(France, {\n        departements: departementsPourCarte,\n        selectedColor: \"#007bff\" // Couleur personnalisée pour les départements sélectionnés\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"etsayMXyDVbnEUViKViC1cgmCVo=\", true);\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useContext","createContext","France","jsxDEV","_jsxDEV","DEPARTEMENTS_ILE_DE_FRANCE","App","_s","formData","setFormData","nom","poste","ville","departement","entreprises","ajouterEntreprise","useEntreprises","detecterDepartement","response","fetch","data","json","length","villeExacte","find","commune","toLowerCase","departementCode","codeDepartement","includes","error","console","handleSubmit","e","preventDefault","departements","Array","isArray","nouvelleEntreprise","alert","entreprisesParDepartement","reduce","acc","entreprise","departementsPourCarte","Set","Object","keys","flatMap","dept","className","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedColor","_c","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/App.js"],"sourcesContent":["import React, { useState, useContext, createContext } from \"react\";\nimport France from \"@socialgouv/react-departements\";\n\nconst DEPARTEMENTS_ILE_DE_FRANCE = [\n  '75', // Paris\n  '77', // Seine-et-Marne\n  '78', // Yvelines\n  '91', // Essonne\n  '92', // Hauts-de-Seine\n  '93', // Seine-Saint-Denis\n  '94', // Val-de-Marne\n  '95'  // Val-d'Oise\n];\n\nfunction App() {\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    poste: \"\",\n    ville: \"\",\n    departement: \"\",\n  });\n  const { entreprises, ajouterEntreprise } = useEntreprises();\n\n  const detecterDepartement = async (ville) => {\n    try {\n      const response = await fetch(\n        `https://geo.api.gouv.fr/communes?nom=${ville}&fields=nom,codeDepartement`\n      );\n      const data = await response.json();\n      if (data.length > 0) {\n        const villeExacte = data.find(\n          (commune) => commune.nom.toLowerCase() === ville.toLowerCase()\n        );\n        \n        let departementCode = villeExacte \n          ? villeExacte.codeDepartement \n          : data[0].codeDepartement;\n        \n        // Si le département est dans Paris ou petite couronne, \n        // retourner tous les départements d'Île-de-France\n        return ['75', '92', '93', '94'].includes(departementCode) \n          ? DEPARTEMENTS_ILE_DE_FRANCE \n          : departementCode;\n      }\n      return \"\";\n    } catch (error) {\n      console.error(\"Erreur lors de la détection du département :\", error);\n      return \"\";\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const departement = await detecterDepartement(formData.ville);\n\n    if (departement) {\n      const departements = Array.isArray(departement) ? departement : [departement];\n      \n      const nouvelleEntreprise = {\n        nom: formData.nom,\n        poste: formData.poste,\n        ville: formData.ville,\n        departement: departements[0], // Garder le premier département pour l'affichage\n      };\n\n      ajouterEntreprise(nouvelleEntreprise);\n\n      // Réinitialiser le formulaire\n      setFormData({ nom: \"\", poste: \"\", ville: \"\", departement: \"\" });\n    } else {\n      alert(\"Impossible de détecter le département pour cette ville.\");\n    }\n  };\n\n  // Calcul du nombre d'entreprises par département\n  const entreprisesParDepartement = entreprises.reduce((acc, entreprise) => {\n    acc[entreprise.departement] = (acc[entreprise.departement] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Obtenir les départements uniques avec gestion spéciale pour l'Île-de-France\n  const departementsPourCarte = [...new Set(\n    Object.keys(entreprisesParDepartement).flatMap(dept => \n      ['75', '92', '93', '94'].includes(dept) \n        ? DEPARTEMENTS_ILE_DE_FRANCE \n        : [dept]\n    )\n  )];\n\n  return (\n    <div className=\"App\">\n      <section>\n        <h1>Ma carte interactive</h1>\n        <France \n          departements={departementsPourCarte} \n          selectedColor=\"#007bff\"  // Couleur personnalisée pour les départements sélectionnés\n        />\n      </section>\n      {/* Reste du code identique */}\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}