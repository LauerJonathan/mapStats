{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/contexts/EntrepriseContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { determinerLocalisation } from \"../utils/location\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ETATS_ENTREPRISE = {\n  EN_ATTENTE: \"en attente\",\n  ENTRETIEN: \"entretien\",\n  REFUS: \"refus\"\n};\nconst EntreprisesContext = /*#__PURE__*/createContext();\nexport function EntreprisesProvider({\n  children\n}) {\n  _s();\n  const [entreprises, setEntreprises] = useState(() => {\n    const savedEntreprises = localStorage.getItem(\"entreprises\");\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n  const ajouterEntreprise = entreprise => {\n    const entrepriseAvecEtat = {\n      ...entreprise,\n      etat: ETATS_ENTREPRISE.EN_ATTENTE\n    };\n    setEntreprises(prev => [...prev, entrepriseAvecEtat]);\n  };\n  const changerEtatEntreprise = (index, nouvelEtat) => {\n    setEntreprises(prev => prev.map((entreprise, i) => i === index ? {\n      ...entreprise,\n      etat: nouvelEtat\n    } : entreprise));\n  };\n  const modifierEntreprise = async (index, entrepriseModifiee) => {\n    if (entrepriseModifiee.pays === \"France\") {\n      const localisation = await determinerLocalisation(entrepriseModifiee.ville, entrepriseModifiee.pays);\n      if (localisation) {\n        const localisations = Array.isArray(localisation) ? localisation : [localisation];\n        entrepriseModifiee.departement = localisations[0];\n      } else {\n        throw new Error(\"Impossible de détecter la localisation pour cette ville.\");\n      }\n    }\n    setEntreprises(prev => prev.map((entreprise, i) => i === index ? {\n      ...entreprise,\n      ...entrepriseModifiee\n    } : entreprise));\n  };\n  return /*#__PURE__*/_jsxDEV(EntreprisesContext.Provider, {\n    value: {\n      entreprises,\n      ajouterEntreprise,\n      changerEtatEntreprise,\n      modifierEntreprise,\n      ETATS_ENTREPRISE\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(EntreprisesProvider, \"LBdsWZ4zUcErKBMvKnA554PrTDc=\");\n_c = EntreprisesProvider;\nexport function useEntreprises() {\n  _s2();\n  return useContext(EntreprisesContext);\n}\n_s2(useEntreprises, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"EntreprisesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","determinerLocalisation","jsxDEV","_jsxDEV","ETATS_ENTREPRISE","EN_ATTENTE","ENTRETIEN","REFUS","EntreprisesContext","EntreprisesProvider","children","_s","entreprises","setEntreprises","savedEntreprises","localStorage","getItem","JSON","parse","setItem","stringify","ajouterEntreprise","entreprise","entrepriseAvecEtat","etat","prev","changerEtatEntreprise","index","nouvelEtat","map","i","modifierEntreprise","entrepriseModifiee","pays","localisation","ville","localisations","Array","isArray","departement","Error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEntreprises","_s2","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/contexts/EntrepriseContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport {determinerLocalisation} from \"../utils/location\";\nconst ETATS_ENTREPRISE = {\n  EN_ATTENTE: \"en attente\",\n  ENTRETIEN: \"entretien\",\n  REFUS: \"refus\",\n};\n\nconst EntreprisesContext = createContext();\n\nexport function EntreprisesProvider({ children }) {\n  const [entreprises, setEntreprises] = useState(() => {\n    const savedEntreprises = localStorage.getItem(\"entreprises\");\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n\n  const ajouterEntreprise = (entreprise) => {\n    const entrepriseAvecEtat = {\n      ...entreprise,\n      etat: ETATS_ENTREPRISE.EN_ATTENTE,\n    };\n    setEntreprises((prev) => [...prev, entrepriseAvecEtat]);\n  };\n\n  const changerEtatEntreprise = (index, nouvelEtat) => {\n    setEntreprises((prev) =>\n      prev.map((entreprise, i) =>\n        i === index ? { ...entreprise, etat: nouvelEtat } : entreprise\n      )\n    );\n  };\n\n  const modifierEntreprise = async (index, entrepriseModifiee) => {\n    if (entrepriseModifiee.pays === \"France\") {\n      const localisation = await determinerLocalisation(\n        entrepriseModifiee.ville,\n        entrepriseModifiee.pays\n      );\n\n      if (localisation) {\n        const localisations = Array.isArray(localisation)\n          ? localisation\n          : [localisation];\n\n        entrepriseModifiee.departement = localisations[0];\n      } else {\n        throw new Error(\n          \"Impossible de détecter la localisation pour cette ville.\"\n        );\n      }\n    }\n\n    setEntreprises((prev) =>\n      prev.map((entreprise, i) =>\n        i === index ? { ...entreprise, ...entrepriseModifiee } : entreprise\n      )\n    );\n  };\n\n  return (\n    <EntreprisesContext.Provider\n      value={{\n        entreprises,\n        ajouterEntreprise,\n        changerEtatEntreprise,\n        modifierEntreprise,\n        ETATS_ENTREPRISE,\n      }}>\n      {children}\n    </EntreprisesContext.Provider>\n  );\n}\n\nexport function useEntreprises() {\n  return useContext(EntreprisesContext);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}