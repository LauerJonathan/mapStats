{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/client/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport France from \"@socialgouv/react-departements\";\nimport { EntreprisesProvider, useEntreprises } from \"./contexts/EntrepriseContext\";\nimport { AddCompanyForm } from \"./components/AddCompanyForm\";\nimport { CompanyTable } from \"./components/CompanyTable\";\nimport { determinerLocalisation } from \"./utils/location\";\nimport { DEPARTEMENTS_ILE_DE_FRANCE } from \"./constants/location\";\n\n// State manager\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchCompanies } from \"./redux/features/companiesSlice\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    items,\n    status,\n    error\n  } = useSelector(state);\n  const {\n    entreprises,\n    ajouterEntreprise,\n    changerEtatEntreprise,\n    modifierEntreprise,\n    ETATS_ENTREPRISE\n  } = useEntreprises();\n  const handleAddCompany = async formData => {\n    const localisation = await determinerLocalisation(formData.ville, formData.pays);\n    if (localisation) {\n      const localisations = Array.isArray(localisation) ? localisation : [localisation];\n      const nouvelleEntreprise = {\n        ...formData,\n        departement: localisations[0]\n      };\n      ajouterEntreprise(nouvelleEntreprise);\n      return true;\n    } else {\n      alert(\"Impossible de détecter la localisation pour cette ville.\");\n      return false;\n    }\n  };\n  const entreprisesParLocalisation = entreprises.reduce((acc, entreprise) => {\n    const key = entreprise.pays === \"France\" ? entreprise.departement : entreprise.pays;\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n  const departementsPourCarte = [...new Set(Object.keys(entreprisesParLocalisation).filter(key => entreprises.some(e => e.pays === \"France\" && (e.departement === key || [\"75\", \"92\", \"93\", \"94\"].includes(key) && DEPARTEMENTS_ILE_DE_FRANCE.includes(e.departement)))).flatMap(dept => [\"75\", \"92\", \"93\", \"94\"].includes(dept) ? DEPARTEMENTS_ILE_DE_FRANCE : [dept]))];\n  const entreprisesFrancaises = entreprises.filter(e => e.pays === \"France\");\n  const entreprisesInternationales = entreprises.filter(e => e.pays !== \"France\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Recherche d'emploi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(France, {\n        departements: departementsPourCarte,\n        selectedColor: \"#007bff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(AddCompanyForm, {\n        onAddCompany: handleAddCompany\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entreprises fran\\xE7aises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CompanyTable, {\n        companies: entreprisesFrancaises,\n        entreprisesParLocalisation: entreprisesParLocalisation,\n        ETATS_ENTREPRISE: ETATS_ENTREPRISE,\n        changerEtatEntreprise: changerEtatEntreprise,\n        modifierEntreprise: modifierEntreprise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entreprises internationales\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CompanyTable, {\n        companies: entreprisesInternationales,\n        isInternational: true,\n        entreprisesParLocalisation: entreprisesParLocalisation,\n        ETATS_ENTREPRISE: ETATS_ENTREPRISE,\n        changerEtatEntreprise: changerEtatEntreprise,\n        modifierEntreprise: modifierEntreprise\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vykewC87bXjXaOYRg4fAU3HpD80=\", false, function () {\n  return [useDispatch, useSelector, useEntreprises];\n});\n_c = App;\nexport default function AppWrapper() {\n  return /*#__PURE__*/_jsxDEV(EntreprisesProvider, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_c2 = AppWrapper;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppWrapper\");","map":{"version":3,"names":["React","useEffect","France","EntreprisesProvider","useEntreprises","AddCompanyForm","CompanyTable","determinerLocalisation","DEPARTEMENTS_ILE_DE_FRANCE","useDispatch","useSelector","fetchCompanies","jsxDEV","_jsxDEV","App","_s","dispatch","items","status","error","state","entreprises","ajouterEntreprise","changerEtatEntreprise","modifierEntreprise","ETATS_ENTREPRISE","handleAddCompany","formData","localisation","ville","pays","localisations","Array","isArray","nouvelleEntreprise","departement","alert","entreprisesParLocalisation","reduce","acc","entreprise","key","departementsPourCarte","Set","Object","keys","filter","some","e","includes","flatMap","dept","entreprisesFrancaises","entreprisesInternationales","className","children","fileName","_jsxFileName","lineNumber","columnNumber","departements","selectedColor","onAddCompany","companies","isInternational","_c","AppWrapper","_c2","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/client/src/App.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport France from \"@socialgouv/react-departements\";\nimport {\n  EntreprisesProvider,\n  useEntreprises,\n} from \"./contexts/EntrepriseContext\";\nimport { AddCompanyForm } from \"./components/AddCompanyForm\";\nimport { CompanyTable } from \"./components/CompanyTable\";\nimport { determinerLocalisation } from \"./utils/location\";\nimport { DEPARTEMENTS_ILE_DE_FRANCE } from \"./constants/location\";\n\n// State manager\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchCompanies } from \"./redux/features/companiesSlice\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const {items, status, error} = useSelector((state))\n  const {\n    entreprises,\n    ajouterEntreprise,\n    changerEtatEntreprise,\n    modifierEntreprise,\n    ETATS_ENTREPRISE,\n  } = useEntreprises();\n\n  const handleAddCompany = async (formData) => {\n    const localisation = await determinerLocalisation(\n      formData.ville,\n      formData.pays\n    );\n\n    if (localisation) {\n      const localisations = Array.isArray(localisation)\n        ? localisation\n        : [localisation];\n\n      const nouvelleEntreprise = {\n        ...formData,\n        departement: localisations[0],\n      };\n\n      ajouterEntreprise(nouvelleEntreprise);\n      return true;\n    } else {\n      alert(\"Impossible de détecter la localisation pour cette ville.\");\n      return false;\n    }\n  };\n\n  const entreprisesParLocalisation = entreprises.reduce((acc, entreprise) => {\n    const key =\n      entreprise.pays === \"France\" ? entreprise.departement : entreprise.pays;\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n\n  const departementsPourCarte = [\n    ...new Set(\n      Object.keys(entreprisesParLocalisation)\n        .filter((key) =>\n          entreprises.some(\n            (e) =>\n              e.pays === \"France\" &&\n              (e.departement === key ||\n                ([\"75\", \"92\", \"93\", \"94\"].includes(key) &&\n                  DEPARTEMENTS_ILE_DE_FRANCE.includes(e.departement)))\n          )\n        )\n        .flatMap((dept) =>\n          [\"75\", \"92\", \"93\", \"94\"].includes(dept)\n            ? DEPARTEMENTS_ILE_DE_FRANCE\n            : [dept]\n        )\n    ),\n  ];\n\n  const entreprisesFrancaises = entreprises.filter((e) => e.pays === \"France\");\n  const entreprisesInternationales = entreprises.filter(\n    (e) => e.pays !== \"France\"\n  );\n\n  return (\n    <div className=\"App\">\n      <section>\n        <h1>Recherche d'emploi</h1>\n        <France departements={departementsPourCarte} selectedColor=\"#007bff\" />\n      </section>\n\n      <section>\n        <AddCompanyForm onAddCompany={handleAddCompany} />\n\n        <h2>Entreprises françaises</h2>\n        <CompanyTable\n          companies={entreprisesFrancaises}\n          entreprisesParLocalisation={entreprisesParLocalisation}\n          ETATS_ENTREPRISE={ETATS_ENTREPRISE}\n          changerEtatEntreprise={changerEtatEntreprise}\n          modifierEntreprise={modifierEntreprise}\n        />\n\n        <h2>Entreprises internationales</h2>\n        <CompanyTable\n          companies={entreprisesInternationales}\n          isInternational={true}\n          entreprisesParLocalisation={entreprisesParLocalisation}\n          ETATS_ENTREPRISE={ETATS_ENTREPRISE}\n          changerEtatEntreprise={changerEtatEntreprise}\n          modifierEntreprise={modifierEntreprise}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default function AppWrapper() {\n  return (\n    <EntreprisesProvider>\n      <App />\n    </EntreprisesProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}