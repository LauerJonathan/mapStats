{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/components/Dashboard/index.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// Importations nécessaires\nimport React, { useState, useContext, createContext, useEffect } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Contexte pour gérer les régions\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegionContext = /*#__PURE__*/createContext();\nconst RegionProvider = ({\n  children\n}) => {\n  _s();\n  const [regions, setRegions] = useState([]);\n  const addRegion = region => {\n    setRegions(prev => {\n      const existing = prev.find(r => r.name === region.name);\n      if (existing) {\n        return prev.map(r => r.name === region.name ? {\n          ...r,\n          intensity: r.intensity + region.intensity\n        } : r);\n      }\n      return [...prev, region];\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(RegionContext.Provider, {\n    value: {\n      regions,\n      addRegion\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n// Composant principal\n_s(RegionProvider, \"PuQ8eFicbvjZXZnQIeive3U9BCE=\");\n_c = RegionProvider;\nconst Dashboard = () => {\n  return /*#__PURE__*/_jsxDEV(RegionProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Tableau de Bord\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RegionForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RegionMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n// Formulaire pour ajouter des régions\n_c2 = Dashboard;\nconst RegionForm = () => {\n  _s2();\n  const {\n    addRegion\n  } = useContext(RegionContext);\n  const [formData, setFormData] = useState({\n    name: '',\n    intensity: 1\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    addRegion({\n      name: formData.name,\n      intensity: parseInt(formData.intensity)\n    });\n    setFormData({\n      name: '',\n      intensity: 1\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      marginBottom: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Nom de la r\\xE9gion\",\n      value: formData.name,\n      onChange: e => setFormData({\n        ...formData,\n        name: e.target.value\n      }),\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Intensit\\xE9\",\n      value: formData.intensity,\n      onChange: e => setFormData({\n        ...formData,\n        intensity: e.target.value\n      }),\n      min: \"1\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Ajouter R\\xE9gion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n// Carte pour afficher les régions\n_s2(RegionForm, \"UyKqTjAobn3T0XE6bWm/g7kHBgM=\");\n_c3 = RegionForm;\nconst RegionMap = () => {\n  _s3();\n  const {\n    regions\n  } = useContext(RegionContext);\n\n  // Exemple de GeoJSON pour les régions\n  const geojsonData = {\n    type: 'FeatureCollection',\n    features: regions.map(region => ({\n      type: 'Feature',\n      properties: {\n        name: region.name,\n        intensity: region.intensity\n      },\n      geometry: {\n        type: 'Polygon',\n        coordinates: [[[-1.5, 47.5], [-1.6, 47.5], [-1.6, 47.6], [-1.5, 47.6], [-1.5, 47.5]]]\n      }\n    }))\n  };\n  const getColor = intensity => {\n    return intensity > 5 ? '#800026' : intensity > 3 ? '#BD0026' : '#FFEDA0';\n  };\n  const onEachFeature = (feature, layer) => {\n    const {\n      name,\n      intensity\n    } = feature.properties;\n    layer.setStyle({\n      fillColor: getColor(intensity),\n      fillOpacity: 0.7,\n      color: '#000',\n      weight: 1\n    });\n    layer.bindPopup(`<strong>${name}</strong><br>Intensité: ${intensity}`);\n  };\n  useEffect(() => {\n    return () => {\n      var _document$querySelect;\n      (_document$querySelect = document.querySelector('.leaflet-container')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.remove();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    // Change la clé si les régions changent\n    style: {\n      height: '500px',\n      width: '800px'\n    },\n    center: [47.5, -1.5],\n    zoom: 6,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: geojsonData,\n      onEachFeature: onEachFeature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, JSON.stringify(regions), true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s3(RegionMap, \"qbF9PsJWhnWPP/FS5zOyX9Y2TZk=\");\n_c4 = RegionMap;\nexport default Dashboard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"RegionProvider\");\n$RefreshReg$(_c2, \"Dashboard\");\n$RefreshReg$(_c3, \"RegionForm\");\n$RefreshReg$(_c4, \"RegionMap\");","map":{"version":3,"names":["React","useState","useContext","createContext","useEffect","MapContainer","TileLayer","GeoJSON","jsxDEV","_jsxDEV","RegionContext","RegionProvider","children","_s","regions","setRegions","addRegion","region","prev","existing","find","r","name","map","intensity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Dashboard","style","display","flexDirection","alignItems","RegionForm","RegionMap","_c2","_s2","formData","setFormData","handleSubmit","e","preventDefault","parseInt","onSubmit","marginBottom","type","placeholder","onChange","target","required","min","_c3","_s3","geojsonData","features","properties","geometry","coordinates","getColor","onEachFeature","feature","layer","setStyle","fillColor","fillOpacity","color","weight","bindPopup","_document$querySelect","document","querySelector","remove","height","width","center","zoom","url","data","JSON","stringify","_c4","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/components/Dashboard/index.jsx"],"sourcesContent":["// Importations nécessaires\nimport React, { useState, useContext, createContext, useEffect } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\n\n// Contexte pour gérer les régions\nconst RegionContext = createContext();\n\nconst RegionProvider = ({ children }) => {\n  const [regions, setRegions] = useState([]);\n\n  const addRegion = (region) => {\n    setRegions((prev) => {\n      const existing = prev.find((r) => r.name === region.name);\n      if (existing) {\n        return prev.map((r) =>\n          r.name === region.name ? { ...r, intensity: r.intensity + region.intensity } : r\n        );\n      }\n      return [...prev, region];\n    });\n  };\n\n  return (\n    <RegionContext.Provider value={{ regions, addRegion }}>\n      {children}\n    </RegionContext.Provider>\n  );\n};\n\n// Composant principal\nconst Dashboard = () => {\n  return (\n    <RegionProvider>\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        <h1>Tableau de Bord</h1>\n        <RegionForm />\n        <RegionMap />\n      </div>\n    </RegionProvider>\n  );\n};\n\n// Formulaire pour ajouter des régions\nconst RegionForm = () => {\n  const { addRegion } = useContext(RegionContext);\n  const [formData, setFormData] = useState({ name: '', intensity: 1 });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addRegion({ name: formData.name, intensity: parseInt(formData.intensity) });\n    setFormData({ name: '', intensity: 1 });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ marginBottom: '20px' }}>\n      <input\n        type=\"text\"\n        placeholder=\"Nom de la région\"\n        value={formData.name}\n        onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n        required\n      />\n      <input\n        type=\"number\"\n        placeholder=\"Intensité\"\n        value={formData.intensity}\n        onChange={(e) => setFormData({ ...formData, intensity: e.target.value })}\n        min=\"1\"\n        required\n      />\n      <button type=\"submit\">Ajouter Région</button>\n    </form>\n  );\n};\n\n// Carte pour afficher les régions\nconst RegionMap = () => {\n  const { regions } = useContext(RegionContext);\n\n  // Exemple de GeoJSON pour les régions\n  const geojsonData = {\n    type: 'FeatureCollection',\n    features: regions.map((region) => ({\n      type: 'Feature',\n      properties: { name: region.name, intensity: region.intensity },\n      geometry: {\n        type: 'Polygon',\n        coordinates: [\n          [\n            [-1.5, 47.5],\n            [-1.6, 47.5],\n            [-1.6, 47.6],\n            [-1.5, 47.6],\n            [-1.5, 47.5],\n          ],\n        ],\n      },\n    })),\n  };\n\n  const getColor = (intensity) => {\n    return intensity > 5 ? '#800026' : intensity > 3 ? '#BD0026' : '#FFEDA0';\n  };\n\n  const onEachFeature = (feature, layer) => {\n    const { name, intensity } = feature.properties;\n    layer.setStyle({ fillColor: getColor(intensity), fillOpacity: 0.7, color: '#000', weight: 1 });\n    layer.bindPopup(`<strong>${name}</strong><br>Intensité: ${intensity}`);\n  };\n\n  useEffect(() => {\n    return () => {\n      document.querySelector('.leaflet-container')?.remove();\n    };\n  }, []);\n\n  return (\n    <MapContainer\n      key={JSON.stringify(regions)} // Change la clé si les régions changent\n      style={{ height: '500px', width: '800px' }}\n      center={[47.5, -1.5]}\n      zoom={6}\n    >\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      <GeoJSON data={geojsonData} onEachFeature={onEachFeature} />\n    </MapContainer>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}