{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useContext, createContext, useEffect } from \"react\";\nimport France from \"@socialgouv/react-departements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEPARTEMENTS_ILE_DE_FRANCE = [\"75\", \"77\", \"78\", \"91\", \"92\", \"93\", \"94\", \"95\"];\n\n// États possibles pour une entreprise\nconst ETATS_ENTREPRISE = {\n  EN_ATTENTE: \"en attente\",\n  ENTRETIEN: \"entretien\",\n  REFUS: \"refus\"\n};\nconst EntreprisesContext = /*#__PURE__*/createContext();\nfunction EntreprisesProvider({\n  children\n}) {\n  _s();\n  const [entreprises, setEntreprises] = useState(() => {\n    const savedEntreprises = localStorage.getItem(\"entreprises\");\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n  const ajouterEntreprise = entreprise => {\n    // Ajouter l'état par défaut lors de la création\n    const entrepriseAvecEtat = {\n      ...entreprise,\n      etat: ETATS_ENTREPRISE.EN_ATTENTE\n    };\n    setEntreprises(prev => [...prev, entrepriseAvecEtat]);\n  };\n\n  // Nouvelle méthode pour mettre à jour l'état d'une entreprise\n  const changerEtatEntreprise = (index, nouvelEtat) => {\n    setEntreprises(prev => prev.map((entreprise, i) => i === index ? {\n      ...entreprise,\n      etat: nouvelEtat\n    } : entreprise));\n  };\n  const supprimerToutesEntreprises = () => {\n    setEntreprises([]);\n    localStorage.removeItem(\"entreprises\");\n  };\n  return /*#__PURE__*/_jsxDEV(EntreprisesContext.Provider, {\n    value: {\n      entreprises,\n      ajouterEntreprise,\n      changerEtatEntreprise,\n      supprimerToutesEntreprises,\n      ETATS_ENTREPRISE\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(EntreprisesProvider, \"LBdsWZ4zUcErKBMvKnA554PrTDc=\");\n_c = EntreprisesProvider;\nfunction useEntreprises() {\n  _s2();\n  return useContext(EntreprisesContext);\n}\n_s2(useEntreprises, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction App() {\n  _s3();\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    poste: \"\",\n    ville: \"\",\n    departement: \"\",\n    pays: \"France\"\n  });\n  const {\n    entreprises,\n    ajouterEntreprise,\n    changerEtatEntreprise,\n    supprimerToutesEntreprises,\n    ETATS_ENTREPRISE\n  } = useEntreprises();\n\n  // Gestion du formulaire\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Fonction de détection du département ou pays\n  const determinerLocalisation = async (ville, pays) => {\n    if (pays === \"France\") {\n      try {\n        const response = await fetch(`https://geo.api.gouv.fr/communes?nom=${ville}&fields=nom,codeDepartement`);\n        const data = await response.json();\n        if (data.length > 0) {\n          // Filtrer les résultats pour trouver une correspondance exacte\n          const villeExacte = data.find(commune => commune.nom.toLowerCase() === ville.toLowerCase());\n          let departementCode = villeExacte ? villeExacte.codeDepartement : data[0].codeDepartement;\n\n          // Si le département est dans Paris ou petite couronne,\n          // retourner tous les départements d'Île-de-France\n          return [\"75\", \"92\", \"93\", \"94\"].includes(departementCode) ? DEPARTEMENTS_ILE_DE_FRANCE : departementCode;\n        }\n        return \"\";\n      } catch (error) {\n        console.error(\"Erreur lors de la détection du département :\", error);\n        return \"\";\n      }\n    }\n    // Pour les pays étrangers, on retourne le pays\n    return pays;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const localisation = await determinerLocalisation(formData.ville, formData.pays);\n    if (localisation) {\n      const localisations = Array.isArray(localisation) ? localisation : [localisation];\n      const nouvelleEntreprise = {\n        nom: formData.nom,\n        poste: formData.poste,\n        ville: formData.ville,\n        departement: localisations[0],\n        // Garder le premier département/pays pour l'affichage\n        pays: formData.pays\n      };\n      ajouterEntreprise(nouvelleEntreprise);\n\n      // Réinitialiser le formulaire\n      setFormData({\n        nom: \"\",\n        poste: \"\",\n        ville: \"\",\n        departement: \"\",\n        pays: \"France\"\n      });\n    } else {\n      alert(\"Impossible de détecter la localisation pour cette ville.\");\n    }\n  };\n\n  // Calcul du nombre d'entreprises par département/pays\n  const entreprisesParLocalisation = entreprises.reduce((acc, entreprise) => {\n    const key = entreprise.pays === \"France\" ? entreprise.departement : entreprise.pays;\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Obtenir les départements uniques avec gestion spéciale pour l'Île-de-France\n  const departementsPourCarte = [...new Set(Object.keys(entreprisesParLocalisation).filter(key => entreprises.some(e => e.pays === \"France\" && (e.departement === key || [\"75\", \"92\", \"93\", \"94\"].includes(key) && DEPARTEMENTS_ILE_DE_FRANCE.includes(e.departement)))).flatMap(dept => [\"75\", \"92\", \"93\", \"94\"].includes(dept) ? DEPARTEMENTS_ILE_DE_FRANCE : [dept]))];\n\n  // Séparer les entreprises françaises et internationales\n  const entreprisesFrancaises = entreprises.filter(e => e.pays === \"France\");\n  const entreprisesInternationales = entreprises.filter(e => e.pays !== \"France\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ma carte interactive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(France, {\n        departements: departementsPourCarte,\n        selectedColor: \"#007bff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entreprises fran\\xE7aises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ville\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Poste\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"D\\xE9partement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\xC9tat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: entreprisesFrancaises.map((entreprise, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.nom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.ville\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.poste\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.departement + \" (\" + (entreprisesParLocalisation[entreprise.departement] || 0) + \")\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.etat\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [entreprise.etat !== ETATS_ENTREPRISE.ENTRETIEN && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => changerEtatEntreprise(index, ETATS_ENTREPRISE.ENTRETIEN),\n                children: \"Entretien\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 21\n              }, this), entreprise.etat !== ETATS_ENTREPRISE.REFUS && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => changerEtatEntreprise(index, ETATS_ENTREPRISE.REFUS),\n                children: \"Refus\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entreprises internationales\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 255,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ville\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Pays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Poste\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"\\xC9tat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Actions\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: entreprisesInternationales.map((entreprise, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.nom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.ville\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.pays\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.poste\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.etat\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: [entreprise.etat !== ETATS_ENTREPRISE.ENTRETIEN && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => changerEtatEntreprise(index, ETATS_ENTREPRISE.ENTRETIEN),\n                children: \"Entretien\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 21\n              }, this), entreprise.etat !== ETATS_ENTREPRISE.REFUS && /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => changerEtatEntreprise(index, ETATS_ENTREPRISE.REFUS),\n                children: \"Refus\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"ZpDITccDKFrlsW1DZqd7kG0rETw=\", false, function () {\n  return [useEntreprises];\n});\n_c2 = App;\nexport default function AppWrapper() {\n  return /*#__PURE__*/_jsxDEV(EntreprisesProvider, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n}\n_c3 = AppWrapper;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EntreprisesProvider\");\n$RefreshReg$(_c2, \"App\");\n$RefreshReg$(_c3, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useContext","createContext","useEffect","France","jsxDEV","_jsxDEV","DEPARTEMENTS_ILE_DE_FRANCE","ETATS_ENTREPRISE","EN_ATTENTE","ENTRETIEN","REFUS","EntreprisesContext","EntreprisesProvider","children","_s","entreprises","setEntreprises","savedEntreprises","localStorage","getItem","JSON","parse","setItem","stringify","ajouterEntreprise","entreprise","entrepriseAvecEtat","etat","prev","changerEtatEntreprise","index","nouvelEtat","map","i","supprimerToutesEntreprises","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEntreprises","_s2","App","_s3","formData","setFormData","nom","poste","ville","departement","pays","handleChange","e","name","target","determinerLocalisation","response","fetch","data","json","length","villeExacte","find","commune","toLowerCase","departementCode","codeDepartement","includes","error","console","handleSubmit","preventDefault","localisation","localisations","Array","isArray","nouvelleEntreprise","alert","entreprisesParLocalisation","reduce","acc","key","departementsPourCarte","Set","Object","keys","filter","some","flatMap","dept","entreprisesFrancaises","entreprisesInternationales","className","departements","selectedColor","onSubmit","onClick","_c2","AppWrapper","_c3","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/App.js"],"sourcesContent":["import React, { useState, useContext, createContext, useEffect } from \"react\";\nimport France from \"@socialgouv/react-departements\";\n\nconst DEPARTEMENTS_ILE_DE_FRANCE = [\n  \"75\", \"77\", \"78\", \"91\", \"92\", \"93\", \"94\", \"95\"\n];\n\n// États possibles pour une entreprise\nconst ETATS_ENTREPRISE = {\n  EN_ATTENTE: \"en attente\",\n  ENTRETIEN: \"entretien\",\n  REFUS: \"refus\"\n};\n\nconst EntreprisesContext = createContext();\n\nfunction EntreprisesProvider({ children }) {\n  const [entreprises, setEntreprises] = useState(() => {\n    const savedEntreprises = localStorage.getItem(\"entreprises\");\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n\n  const ajouterEntreprise = (entreprise) => {\n    // Ajouter l'état par défaut lors de la création\n    const entrepriseAvecEtat = {\n      ...entreprise,\n      etat: ETATS_ENTREPRISE.EN_ATTENTE\n    };\n    setEntreprises((prev) => [...prev, entrepriseAvecEtat]);\n  };\n\n  // Nouvelle méthode pour mettre à jour l'état d'une entreprise\n  const changerEtatEntreprise = (index, nouvelEtat) => {\n    setEntreprises(prev => \n      prev.map((entreprise, i) => \n        i === index ? { ...entreprise, etat: nouvelEtat } : entreprise\n      )\n    );\n  };\n\n  const supprimerToutesEntreprises = () => {\n    setEntreprises([]);\n    localStorage.removeItem(\"entreprises\");\n  };\n\n  return (\n    <EntreprisesContext.Provider\n      value={{\n        entreprises,\n        ajouterEntreprise,\n        changerEtatEntreprise,\n        supprimerToutesEntreprises,\n        ETATS_ENTREPRISE\n      }}>\n      {children}\n    </EntreprisesContext.Provider>\n  );\n}\n\nfunction useEntreprises() {\n  return useContext(EntreprisesContext);\n}\n\nfunction App() {\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    poste: \"\",\n    ville: \"\",\n    departement: \"\",\n    pays: \"France\",\n  });\n  const { \n    entreprises, \n    ajouterEntreprise, \n    changerEtatEntreprise, \n    supprimerToutesEntreprises,\n    ETATS_ENTREPRISE \n  } = useEntreprises();\n\n  // Gestion du formulaire\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  // Fonction de détection du département ou pays\n  const determinerLocalisation = async (ville, pays) => {\n    if (pays === \"France\") {\n      try {\n        const response = await fetch(\n          `https://geo.api.gouv.fr/communes?nom=${ville}&fields=nom,codeDepartement`\n        );\n        const data = await response.json();\n        if (data.length > 0) {\n          // Filtrer les résultats pour trouver une correspondance exacte\n          const villeExacte = data.find(\n            (commune) => commune.nom.toLowerCase() === ville.toLowerCase()\n          );\n\n          let departementCode = villeExacte\n            ? villeExacte.codeDepartement\n            : data[0].codeDepartement;\n\n          // Si le département est dans Paris ou petite couronne,\n          // retourner tous les départements d'Île-de-France\n          return [\"75\", \"92\", \"93\", \"94\"].includes(departementCode)\n            ? DEPARTEMENTS_ILE_DE_FRANCE\n            : departementCode;\n        }\n        return \"\";\n      } catch (error) {\n        console.error(\"Erreur lors de la détection du département :\", error);\n        return \"\";\n      }\n    }\n    // Pour les pays étrangers, on retourne le pays\n    return pays;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const localisation = await determinerLocalisation(\n      formData.ville,\n      formData.pays\n    );\n\n    if (localisation) {\n      const localisations = Array.isArray(localisation)\n        ? localisation\n        : [localisation];\n\n      const nouvelleEntreprise = {\n        nom: formData.nom,\n        poste: formData.poste,\n        ville: formData.ville,\n        departement: localisations[0], // Garder le premier département/pays pour l'affichage\n        pays: formData.pays,\n      };\n\n      ajouterEntreprise(nouvelleEntreprise);\n\n      // Réinitialiser le formulaire\n      setFormData({\n        nom: \"\",\n        poste: \"\",\n        ville: \"\",\n        departement: \"\",\n        pays: \"France\",\n      });\n    } else {\n      alert(\"Impossible de détecter la localisation pour cette ville.\");\n    }\n  };\n\n  // Calcul du nombre d'entreprises par département/pays\n  const entreprisesParLocalisation = entreprises.reduce((acc, entreprise) => {\n    const key =\n      entreprise.pays === \"France\" ? entreprise.departement : entreprise.pays;\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Obtenir les départements uniques avec gestion spéciale pour l'Île-de-France\n  const departementsPourCarte = [\n    ...new Set(\n      Object.keys(entreprisesParLocalisation)\n        .filter((key) =>\n          entreprises.some(\n            (e) =>\n              e.pays === \"France\" &&\n              (e.departement === key ||\n                ([\"75\", \"92\", \"93\", \"94\"].includes(key) &&\n                  DEPARTEMENTS_ILE_DE_FRANCE.includes(e.departement)))\n          )\n        )\n        .flatMap((dept) =>\n          [\"75\", \"92\", \"93\", \"94\"].includes(dept)\n            ? DEPARTEMENTS_ILE_DE_FRANCE\n            : [dept]\n        )\n    ),\n  ];\n\n  // Séparer les entreprises françaises et internationales\n  const entreprisesFrancaises = entreprises.filter((e) => e.pays === \"France\");\n  const entreprisesInternationales = entreprises.filter(\n    (e) => e.pays !== \"France\"\n  );\n\n  return (\n    <div className=\"App\">\n      <section>\n        <h1>Ma carte interactive</h1>\n        <France departements={departementsPourCarte} selectedColor=\"#007bff\" />\n      </section>\n      <section>\n        <form onSubmit={handleSubmit}>\n          {/* Formulaire inchangé */}\n        </form>\n\n        <h2>Entreprises françaises</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Ville</th>\n              <th>Poste</th>\n              <th>Département</th>\n              <th>État</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {entreprisesFrancaises.map((entreprise, index) => (\n              <tr key={index}>\n                <td>{entreprise.nom}</td>\n                <td>{entreprise.ville}</td>\n                <td>{entreprise.poste}</td>\n                <td>\n                  {entreprise.departement +\n                    \" (\" +\n                    (entreprisesParLocalisation[entreprise.departement] || 0) +\n                    \")\"}\n                </td>\n                <td>{entreprise.etat}</td>\n                <td>\n                  {entreprise.etat !== ETATS_ENTREPRISE.ENTRETIEN && (\n                    <button \n                      onClick={() => changerEtatEntreprise(index, ETATS_ENTREPRISE.ENTRETIEN)}\n                    >\n                      Entretien\n                    </button>\n                  )}\n                  {entreprise.etat !== ETATS_ENTREPRISE.REFUS && (\n                    <button \n                      onClick={() => changerEtatEntreprise(index, ETATS_ENTREPRISE.REFUS)}\n                    >\n                      Refus\n                    </button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <h2>Entreprises internationales</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Ville</th>\n              <th>Pays</th>\n              <th>Poste</th>\n              <th>État</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {entreprisesInternationales.map((entreprise, index) => (\n              <tr key={index}>\n                <td>{entreprise.nom}</td>\n                <td>{entreprise.ville}</td>\n                <td>{entreprise.pays}</td>\n                <td>{entreprise.poste}</td>\n                <td>{entreprise.etat}</td>\n                <td>\n                  {entreprise.etat !== ETATS_ENTREPRISE.ENTRETIEN && (\n                    <button \n                      onClick={() => changerEtatEntreprise(index, ETATS_ENTREPRISE.ENTRETIEN)}\n                    >\n                      Entretien\n                    </button>\n                  )}\n                  {entreprise.etat !== ETATS_ENTREPRISE.REFUS && (\n                    <button \n                      onClick={() => changerEtatEntreprise(index, ETATS_ENTREPRISE.REFUS)}\n                    >\n                      Refus\n                    </button>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </div>\n  );\n}\n\nexport default function AppWrapper() {\n  return (\n    <EntreprisesProvider>\n      <App />\n    </EntreprisesProvider>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}