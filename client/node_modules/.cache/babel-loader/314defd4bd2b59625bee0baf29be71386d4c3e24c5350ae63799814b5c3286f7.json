{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/contexts/EntrepriseContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { determinerLocalisation } from \"../utils/location\";\nimport { companyList } from \"./data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ETATS_ENTREPRISE = {\n  EN_ATTENTE: \"en attente\",\n  ENTRETIEN: \"entretien\",\n  REFUS: \"refus\"\n};\nconst EntreprisesContext = /*#__PURE__*/createContext();\nexport function EntreprisesProvider({\n  children\n}) {\n  _s();\n  const [entreprises, setEntreprises] = useState(() => {\n    let savedEntreprises = [];\n    if (localStorage.getItem(\"entreprises\")) {\n      savedEntreprises = localStorage.getItem(\"entreprises\");\n    } else {\n      localStorage.setItem(\"entreprises\", companyList);\n      savedEntreprises = localStorage;\n    }\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n  const ajouterEntreprise = entreprise => {\n    const entrepriseAvecEtat = {\n      ...entreprise,\n      etat: ETATS_ENTREPRISE.EN_ATTENTE\n    };\n    setEntreprises(prev => [...prev, entrepriseAvecEtat]);\n  };\n  const changerEtatEntreprise = (index, nouvelEtat) => {\n    setEntreprises(prev => prev.map((entreprise, i) => i === index ? {\n      ...entreprise,\n      etat: nouvelEtat\n    } : entreprise));\n  };\n  const modifierEntreprise = async (index, entrepriseModifiee) => {\n    try {\n      if (entrepriseModifiee.pays === \"France\") {\n        const localisation = await determinerLocalisation(entrepriseModifiee.ville, entrepriseModifiee.pays);\n        if (localisation) {\n          const localisations = Array.isArray(localisation) ? localisation : [localisation];\n          entrepriseModifiee.departement = localisations[0];\n        } else {\n          throw new Error(\"Impossible de détecter la localisation pour cette ville.\");\n        }\n      }\n      setEntreprises(prev => prev.map((entreprise, i) => i === index ? {\n        ...entreprise,\n        ...entrepriseModifiee\n      } : entreprise));\n    } catch (error) {\n      throw error;\n    }\n  };\n  const supprimerToutesEntreprises = () => {\n    setEntreprises([]);\n    localStorage.removeItem(\"entreprises\");\n  };\n  const value = {\n    entreprises,\n    ajouterEntreprise,\n    changerEtatEntreprise,\n    modifierEntreprise,\n    supprimerToutesEntreprises,\n    ETATS_ENTREPRISE\n  };\n  return /*#__PURE__*/_jsxDEV(EntreprisesContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(EntreprisesProvider, \"Jf94AowG+34/8NlkmacybFP4BTc=\");\n_c = EntreprisesProvider;\nexport const useEntreprises = () => {\n  _s2();\n  return useContext(EntreprisesContext);\n};\n_s2(useEntreprises, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"EntreprisesProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","determinerLocalisation","companyList","jsxDEV","_jsxDEV","ETATS_ENTREPRISE","EN_ATTENTE","ENTRETIEN","REFUS","EntreprisesContext","EntreprisesProvider","children","_s","entreprises","setEntreprises","savedEntreprises","localStorage","getItem","setItem","JSON","parse","stringify","ajouterEntreprise","entreprise","entrepriseAvecEtat","etat","prev","changerEtatEntreprise","index","nouvelEtat","map","i","modifierEntreprise","entrepriseModifiee","pays","localisation","ville","localisations","Array","isArray","departement","Error","error","supprimerToutesEntreprises","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEntreprises","_s2","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/contexts/EntrepriseContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { determinerLocalisation } from \"../utils/location\";\nimport { companyList } from \"./data\";\n\nconst ETATS_ENTREPRISE = {\n  EN_ATTENTE: \"en attente\",\n  ENTRETIEN: \"entretien\",\n  REFUS: \"refus\",\n};\n\nconst EntreprisesContext = createContext();\n\nexport function EntreprisesProvider({ children }) {\n  const [entreprises, setEntreprises] = useState(() => {\n    let savedEntreprises = [];\n    if (localStorage.getItem(\"entreprises\")) {\n      savedEntreprises = localStorage.getItem(\"entreprises\");\n    } else {\n      localStorage.setItem(\"entreprises\", companyList);\n      savedEntreprises = localStorage\n    }\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n\n  const ajouterEntreprise = (entreprise) => {\n    const entrepriseAvecEtat = {\n      ...entreprise,\n      etat: ETATS_ENTREPRISE.EN_ATTENTE,\n    };\n    setEntreprises((prev) => [...prev, entrepriseAvecEtat]);\n  };\n\n  const changerEtatEntreprise = (index, nouvelEtat) => {\n    setEntreprises((prev) =>\n      prev.map((entreprise, i) =>\n        i === index ? { ...entreprise, etat: nouvelEtat } : entreprise\n      )\n    );\n  };\n\n  const modifierEntreprise = async (index, entrepriseModifiee) => {\n    try {\n      if (entrepriseModifiee.pays === \"France\") {\n        const localisation = await determinerLocalisation(\n          entrepriseModifiee.ville,\n          entrepriseModifiee.pays\n        );\n\n        if (localisation) {\n          const localisations = Array.isArray(localisation)\n            ? localisation\n            : [localisation];\n\n          entrepriseModifiee.departement = localisations[0];\n        } else {\n          throw new Error(\n            \"Impossible de détecter la localisation pour cette ville.\"\n          );\n        }\n      }\n\n      setEntreprises((prev) =>\n        prev.map((entreprise, i) =>\n          i === index ? { ...entreprise, ...entrepriseModifiee } : entreprise\n        )\n      );\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const supprimerToutesEntreprises = () => {\n    setEntreprises([]);\n    localStorage.removeItem(\"entreprises\");\n  };\n\n  const value = {\n    entreprises,\n    ajouterEntreprise,\n    changerEtatEntreprise,\n    modifierEntreprise,\n    supprimerToutesEntreprises,\n    ETATS_ENTREPRISE,\n  };\n\n  return (\n    <EntreprisesContext.Provider value={value}>\n      {children}\n    </EntreprisesContext.Provider>\n  );\n}\n\nexport const useEntreprises = () => useContext(EntreprisesContext);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}