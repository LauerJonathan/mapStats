{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/components/Dashboard/index.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useContext, createContext, useEffect, useMemo } from \"react\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport regionsGeoJSON from \"./france-regions.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegionContext = /*#__PURE__*/createContext();\nconst RegionProvider = ({\n  children\n}) => {\n  _s();\n  const [regions, setRegions] = useState([]);\n  const addRegion = region => {\n    setRegions(prev => {\n      const existing = prev.find(r => r.name.toLowerCase() === region.name.toLowerCase());\n      if (existing) {\n        return prev.map(r => r.name.toLowerCase() === region.name.toLowerCase() ? {\n          ...r,\n          intensity: r.intensity + region.intensity\n        } : r);\n      }\n      return [...prev, region];\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(RegionContext.Provider, {\n    value: {\n      regions,\n      addRegion\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(RegionProvider, \"PuQ8eFicbvjZXZnQIeive3U9BCE=\");\n_c = RegionProvider;\nconst Dashboard = () => {\n  return /*#__PURE__*/_jsxDEV(RegionProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Carte des R\\xE9gions Fran\\xE7aises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RegionForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RegionMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Dashboard;\nconst RegionForm = () => {\n  _s2();\n  const {\n    addRegion\n  } = useContext(RegionContext);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    intensity: 1\n  });\n  const handleSubmit = e => {\n    e.preventDefault();\n    const trimmedName = formData.name.trim();\n    const intensity = parseInt(formData.intensity, 10);\n    if (!trimmedName || isNaN(intensity) || intensity < 1) {\n      alert(\"Veuillez fournir un nom valide et une intensité positive.\");\n      return;\n    }\n    addRegion({\n      name: trimmedName,\n      intensity: intensity\n    });\n    setFormData({\n      name: \"\",\n      intensity: 1\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    style: {\n      marginBottom: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      value: formData.name,\n      onChange: e => setFormData({\n        ...formData,\n        name: e.target.value\n      }),\n      required: true,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"S\\xE9lectionnez une r\\xE9gion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), regionsGeoJSON.features.map(region => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: region.properties.nom,\n        children: region.properties.nom\n      }, region.properties.nom, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      placeholder: \"Intensit\\xE9\",\n      value: formData.intensity,\n      onChange: e => setFormData({\n        ...formData,\n        intensity: e.target.value\n      }),\n      min: \"1\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Ajouter R\\xE9gion\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s2(RegionForm, \"gG0KnqDvOafp9NIjKRgH+aE1N9Y=\");\n_c3 = RegionForm;\nconst RegionMap = () => {\n  _s3();\n  const {\n    regions\n  } = useContext(RegionContext);\n  const getColor = regionName => {\n    const regionData = regions.find(r => r.name.toLowerCase() === regionName.toLowerCase());\n    const intensity = regionData ? regionData.intensity : 0;\n    return intensity > 5 ? \"#800026\" : intensity > 3 ? \"#BD0026\" : intensity > 1 ? \"#FED976\" : \"#FFEDA0\";\n  };\n  const onEachFeature = (feature, layer) => {\n    const regionName = feature.properties.nom;\n    const regionData = regions.find(r => r.name.toLowerCase() === regionName.toLowerCase());\n    const intensity = regionData ? regionData.intensity : 0;\n    layer.setStyle({\n      fillColor: getColor(regionName),\n      fillOpacity: 0.7,\n      color: \"#000\",\n      weight: 1\n    });\n    layer.bindPopup(`\n      <strong>${regionName}</strong><br>\n      Intensité: ${intensity}\n    `);\n  };\n\n  // Utilisation de useMemo pour éviter les re-rendus inutiles\n  const memoizedGeoJSON = useMemo(() => {\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: regionsGeoJSON,\n      onEachFeature: onEachFeature\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 12\n    }, this);\n  }, [regions]);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    // Clé unique pour forcer un nouveau rendu si nécessaire\n    style: {\n      height: \"500px\",\n      width: \"800px\"\n    },\n    center: [46.5, 2.5],\n    zoom: 5,\n    maxZoom: 10,\n    minZoom: 4,\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), memoizedGeoJSON]\n  }, \"france-map\", true, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s3(RegionMap, \"L05H7mdIPE2YbEFWPcanHrFgad8=\");\n_c4 = RegionMap;\nexport default Dashboard;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"RegionProvider\");\n$RefreshReg$(_c2, \"Dashboard\");\n$RefreshReg$(_c3, \"RegionForm\");\n$RefreshReg$(_c4, \"RegionMap\");","map":{"version":3,"names":["React","useState","useContext","createContext","useEffect","useMemo","MapContainer","TileLayer","GeoJSON","regionsGeoJSON","jsxDEV","_jsxDEV","RegionContext","RegionProvider","children","_s","regions","setRegions","addRegion","region","prev","existing","find","r","name","toLowerCase","map","intensity","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","Dashboard","style","display","flexDirection","alignItems","RegionForm","RegionMap","_c2","_s2","formData","setFormData","handleSubmit","e","preventDefault","trimmedName","trim","parseInt","isNaN","alert","onSubmit","marginBottom","onChange","target","required","features","properties","nom","type","placeholder","min","_c3","_s3","getColor","regionName","regionData","onEachFeature","feature","layer","setStyle","fillColor","fillOpacity","color","weight","bindPopup","memoizedGeoJSON","data","height","width","center","zoom","maxZoom","minZoom","url","_c4","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/components/Dashboard/index.jsx"],"sourcesContent":["import React, {\n  useState,\n  useContext,\n  createContext,\n  useEffect,\n  useMemo,\n} from \"react\";\nimport { MapContainer, TileLayer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport regionsGeoJSON from \"./france-regions.json\";\n\nconst RegionContext = createContext();\n\nconst RegionProvider = ({ children }) => {\n  const [regions, setRegions] = useState([]);\n\n  const addRegion = (region) => {\n    setRegions((prev) => {\n      const existing = prev.find(\n        (r) => r.name.toLowerCase() === region.name.toLowerCase()\n      );\n      if (existing) {\n        return prev.map((r) =>\n          r.name.toLowerCase() === region.name.toLowerCase()\n            ? { ...r, intensity: r.intensity + region.intensity }\n            : r\n        );\n      }\n      return [...prev, region];\n    });\n  };\n\n  return (\n    <RegionContext.Provider value={{ regions, addRegion }}>\n      {children}\n    </RegionContext.Provider>\n  );\n};\n\nconst Dashboard = () => {\n  return (\n    <RegionProvider>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}>\n        <h1>Carte des Régions Françaises</h1>\n        <RegionForm />\n        <RegionMap />\n      </div>\n    </RegionProvider>\n  );\n};\n\nconst RegionForm = () => {\n  const { addRegion } = useContext(RegionContext);\n  const [formData, setFormData] = useState({ name: \"\", intensity: 1 });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const trimmedName = formData.name.trim();\n    const intensity = parseInt(formData.intensity, 10);\n\n    if (!trimmedName || isNaN(intensity) || intensity < 1) {\n      alert(\"Veuillez fournir un nom valide et une intensité positive.\");\n      return;\n    }\n\n    addRegion({\n      name: trimmedName,\n      intensity: intensity,\n    });\n\n    setFormData({ name: \"\", intensity: 1 });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} style={{ marginBottom: \"20px\" }}>\n      <select\n        value={formData.name}\n        onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n        required>\n        <option value=\"\">Sélectionnez une région</option>\n        {regionsGeoJSON.features.map((region) => (\n          <option key={region.properties.nom} value={region.properties.nom}>\n            {region.properties.nom}\n          </option>\n        ))}\n      </select>\n      <input\n        type=\"number\"\n        placeholder=\"Intensité\"\n        value={formData.intensity}\n        onChange={(e) =>\n          setFormData({ ...formData, intensity: e.target.value })\n        }\n        min=\"1\"\n        required\n      />\n      <button type=\"submit\">Ajouter Région</button>\n    </form>\n  );\n};\n\nconst RegionMap = () => {\n  const { regions } = useContext(RegionContext);\n\n  const getColor = (regionName) => {\n    const regionData = regions.find(\n      (r) => r.name.toLowerCase() === regionName.toLowerCase()\n    );\n    const intensity = regionData ? regionData.intensity : 0;\n\n    return intensity > 5\n      ? \"#800026\"\n      : intensity > 3\n      ? \"#BD0026\"\n      : intensity > 1\n      ? \"#FED976\"\n      : \"#FFEDA0\";\n  };\n\n  const onEachFeature = (feature, layer) => {\n    const regionName = feature.properties.nom;\n    const regionData = regions.find(\n      (r) => r.name.toLowerCase() === regionName.toLowerCase()\n    );\n    const intensity = regionData ? regionData.intensity : 0;\n\n    layer.setStyle({\n      fillColor: getColor(regionName),\n      fillOpacity: 0.7,\n      color: \"#000\",\n      weight: 1,\n    });\n\n    layer.bindPopup(`\n      <strong>${regionName}</strong><br>\n      Intensité: ${intensity}\n    `);\n  };\n\n  // Utilisation de useMemo pour éviter les re-rendus inutiles\n  const memoizedGeoJSON = useMemo(() => {\n    return <GeoJSON data={regionsGeoJSON} onEachFeature={onEachFeature} />;\n  }, [regions]);\n\n  return (\n    <MapContainer\n      key=\"france-map\" // Clé unique pour forcer un nouveau rendu si nécessaire\n      style={{ height: \"500px\", width: \"800px\" }}\n      center={[46.5, 2.5]}\n      zoom={5}\n      maxZoom={10}\n      minZoom={4}>\n      <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n      {memoizedGeoJSON}\n    </MapContainer>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}