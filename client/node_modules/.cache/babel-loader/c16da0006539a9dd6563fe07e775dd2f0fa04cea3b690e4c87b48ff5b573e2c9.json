{"ast":null,"code":"var _jsxFileName = \"/Users/JOJO/Documents/devArea/inProgress/mapstats/src/App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useContext, createContext, useEffect } from \"react\";\nimport France from \"@socialgouv/react-departements\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DEPARTEMENTS_ILE_DE_FRANCE = [\"75\",\n// Paris\n\"77\",\n// Seine-et-Marne\n\"78\",\n// Yvelines\n\"91\",\n// Essonne\n\"92\",\n// Hauts-de-Seine\n\"93\",\n// Seine-Saint-Denis\n\"94\",\n// Val-de-Marne\n\"95\" // Val-d'Oise\n];\n\n// Crée le contexte\nconst EntreprisesContext = /*#__PURE__*/createContext();\n\n// Fournisseur du contexte\nfunction EntreprisesProvider({\n  children\n}) {\n  _s();\n  // Charger les entreprises depuis localStorage au démarrage\n  const [entreprises, setEntreprises] = useState(() => {\n    const savedEntreprises = localStorage.getItem(\"entreprises\");\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n\n  // Mettre à jour localStorage à chaque modification de la liste des entreprises\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n  const ajouterEntreprise = entreprise => {\n    setEntreprises(prev => [...prev, entreprise]);\n  };\n\n  // Ajouter une méthode pour supprimer toutes les entreprises\n  const supprimerToutesEntreprises = () => {\n    setEntreprises([]);\n    localStorage.removeItem(\"entreprises\");\n  };\n  return /*#__PURE__*/_jsxDEV(EntreprisesContext.Provider, {\n    value: {\n      entreprises,\n      ajouterEntreprise,\n      supprimerToutesEntreprises\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n// Custom Hook pour accéder au contexte\n_s(EntreprisesProvider, \"LBdsWZ4zUcErKBMvKnA554PrTDc=\");\n_c = EntreprisesProvider;\nfunction useEntreprises() {\n  _s2();\n  return useContext(EntreprisesContext);\n}\n\n// Composant principal\n_s2(useEntreprises, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction App() {\n  _s3();\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    poste: \"\",\n    ville: \"\",\n    departement: \"\",\n    pays: \"France\" // Nouveau champ pour le pays\n  });\n  const {\n    entreprises,\n    ajouterEntreprise,\n    supprimerToutesEntreprises\n  } = useEntreprises();\n\n  // Gestion du formulaire\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  // Fonction de détection du département ou pays\n  const determinerLocalisation = async (ville, pays) => {\n    if (pays === \"France\") {\n      try {\n        const response = await fetch(`https://geo.api.gouv.fr/communes?nom=${ville}&fields=nom,codeDepartement`);\n        const data = await response.json();\n        if (data.length > 0) {\n          // Filtrer les résultats pour trouver une correspondance exacte\n          const villeExacte = data.find(commune => commune.nom.toLowerCase() === ville.toLowerCase());\n          let departementCode = villeExacte ? villeExacte.codeDepartement : data[0].codeDepartement;\n\n          // Si le département est dans Paris ou petite couronne,\n          // retourner tous les départements d'Île-de-France\n          return [\"75\", \"92\", \"93\", \"94\"].includes(departementCode) ? DEPARTEMENTS_ILE_DE_FRANCE : departementCode;\n        }\n        return \"\";\n      } catch (error) {\n        console.error(\"Erreur lors de la détection du département :\", error);\n        return \"\";\n      }\n    }\n    // Pour les pays étrangers, on retourne le pays\n    return pays;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const localisation = await determinerLocalisation(formData.ville, formData.pays);\n    if (localisation) {\n      const localisations = Array.isArray(localisation) ? localisation : [localisation];\n      const nouvelleEntreprise = {\n        nom: formData.nom,\n        poste: formData.poste,\n        ville: formData.ville,\n        departement: localisations[0],\n        // Garder le premier département/pays pour l'affichage\n        pays: formData.pays\n      };\n      ajouterEntreprise(nouvelleEntreprise);\n\n      // Réinitialiser le formulaire\n      setFormData({\n        nom: \"\",\n        poste: \"\",\n        ville: \"\",\n        departement: \"\",\n        pays: \"France\"\n      });\n    } else {\n      alert(\"Impossible de détecter la localisation pour cette ville.\");\n    }\n  };\n\n  // Calcul du nombre d'entreprises par département/pays\n  const entreprisesParLocalisation = entreprises.reduce((acc, entreprise) => {\n    const key = entreprise.pays === \"France\" ? entreprise.departement : entreprise.pays;\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Obtenir les départements uniques avec gestion spéciale pour l'Île-de-France\n  const departementsPourCarte = [...new Set(Object.keys(entreprisesParLocalisation).filter(key => [\"75\", \"92\", \"93\", \"94\"].includes(key) || key === \"France\").flatMap(dept => [\"75\", \"92\", \"93\", \"94\"].includes(dept) ? DEPARTEMENTS_ILE_DE_FRANCE : [dept]))];\n\n  // Séparer les entreprises françaises et internationales\n  const entreprisesFrancaises = entreprises.filter(e => e.pays === \"France\");\n  const entreprisesInternationales = entreprises.filter(e => e.pays !== \"France\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ma carte interactive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(France, {\n        departements: departementsPourCarte,\n        selectedColor: \"#007bff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Nom de l'entreprise :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"nom\",\n            value: formData.nom,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Ville :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"ville\",\n            value: formData.ville,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Poste :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"poste\",\n            value: formData.poste,\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Pays :\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"pays\",\n            value: formData.pays,\n            onChange: handleChange,\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"France\",\n              children: \"France\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Suisse\",\n              children: \"Suisse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Belgique\",\n              children: \"Belgique\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Ajouter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: supprimerToutesEntreprises,\n          children: \"Supprimer toutes les entreprises\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entreprises fran\\xE7aises\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ville\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Poste\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"D\\xE9partement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: entreprisesFrancaises.map((entreprise, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.nom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.ville\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.poste\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.departement + \" (\" + entreprisesParLocalisation[entreprise.departement] + \")\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Entreprises internationales\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nom\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Ville\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Pays\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Poste\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: entreprisesInternationales.map((entreprise, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.nom\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.ville\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.pays\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: entreprise.poste\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n}\n\n// Encapsuler l'application avec le fournisseur du contexte\n_s3(App, \"o5NNEysbyxEcA8hWjC8DqHvW4Jc=\", false, function () {\n  return [useEntreprises];\n});\n_c2 = App;\nexport default function AppWrapper() {\n  return /*#__PURE__*/_jsxDEV(EntreprisesProvider, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 291,\n    columnNumber: 5\n  }, this);\n}\n_c3 = AppWrapper;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"EntreprisesProvider\");\n$RefreshReg$(_c2, \"App\");\n$RefreshReg$(_c3, \"AppWrapper\");","map":{"version":3,"names":["React","useState","useContext","createContext","useEffect","France","jsxDEV","_jsxDEV","DEPARTEMENTS_ILE_DE_FRANCE","EntreprisesContext","EntreprisesProvider","children","_s","entreprises","setEntreprises","savedEntreprises","localStorage","getItem","JSON","parse","setItem","stringify","ajouterEntreprise","entreprise","prev","supprimerToutesEntreprises","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useEntreprises","_s2","App","_s3","formData","setFormData","nom","poste","ville","departement","pays","handleChange","e","name","target","determinerLocalisation","response","fetch","data","json","length","villeExacte","find","commune","toLowerCase","departementCode","codeDepartement","includes","error","console","handleSubmit","preventDefault","localisation","localisations","Array","isArray","nouvelleEntreprise","alert","entreprisesParLocalisation","reduce","acc","key","departementsPourCarte","Set","Object","keys","filter","flatMap","dept","entreprisesFrancaises","entreprisesInternationales","className","departements","selectedColor","onSubmit","type","onChange","required","onClick","map","index","_c2","AppWrapper","_c3","$RefreshReg$"],"sources":["/Users/JOJO/Documents/devArea/inProgress/mapstats/src/App.js"],"sourcesContent":["import React, { useState, useContext, createContext, useEffect } from \"react\";\nimport France from \"@socialgouv/react-departements\";\n\nconst DEPARTEMENTS_ILE_DE_FRANCE = [\n  \"75\", // Paris\n  \"77\", // Seine-et-Marne\n  \"78\", // Yvelines\n  \"91\", // Essonne\n  \"92\", // Hauts-de-Seine\n  \"93\", // Seine-Saint-Denis\n  \"94\", // Val-de-Marne\n  \"95\", // Val-d'Oise\n];\n\n// Crée le contexte\nconst EntreprisesContext = createContext();\n\n// Fournisseur du contexte\nfunction EntreprisesProvider({ children }) {\n  // Charger les entreprises depuis localStorage au démarrage\n  const [entreprises, setEntreprises] = useState(() => {\n    const savedEntreprises = localStorage.getItem(\"entreprises\");\n    return savedEntreprises ? JSON.parse(savedEntreprises) : [];\n  });\n\n  // Mettre à jour localStorage à chaque modification de la liste des entreprises\n  useEffect(() => {\n    localStorage.setItem(\"entreprises\", JSON.stringify(entreprises));\n  }, [entreprises]);\n\n  const ajouterEntreprise = (entreprise) => {\n    setEntreprises((prev) => [...prev, entreprise]);\n  };\n\n  // Ajouter une méthode pour supprimer toutes les entreprises\n  const supprimerToutesEntreprises = () => {\n    setEntreprises([]);\n    localStorage.removeItem(\"entreprises\");\n  };\n\n  return (\n    <EntreprisesContext.Provider\n      value={{\n        entreprises,\n        ajouterEntreprise,\n        supprimerToutesEntreprises,\n      }}>\n      {children}\n    </EntreprisesContext.Provider>\n  );\n}\n\n// Custom Hook pour accéder au contexte\nfunction useEntreprises() {\n  return useContext(EntreprisesContext);\n}\n\n// Composant principal\nfunction App() {\n  const [formData, setFormData] = useState({\n    nom: \"\",\n    poste: \"\",\n    ville: \"\",\n    departement: \"\",\n    pays: \"France\", // Nouveau champ pour le pays\n  });\n  const { entreprises, ajouterEntreprise, supprimerToutesEntreprises } =\n    useEntreprises();\n\n  // Gestion du formulaire\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  // Fonction de détection du département ou pays\n  const determinerLocalisation = async (ville, pays) => {\n    if (pays === \"France\") {\n      try {\n        const response = await fetch(\n          `https://geo.api.gouv.fr/communes?nom=${ville}&fields=nom,codeDepartement`\n        );\n        const data = await response.json();\n        if (data.length > 0) {\n          // Filtrer les résultats pour trouver une correspondance exacte\n          const villeExacte = data.find(\n            (commune) => commune.nom.toLowerCase() === ville.toLowerCase()\n          );\n\n          let departementCode = villeExacte\n            ? villeExacte.codeDepartement\n            : data[0].codeDepartement;\n\n          // Si le département est dans Paris ou petite couronne,\n          // retourner tous les départements d'Île-de-France\n          return [\"75\", \"92\", \"93\", \"94\"].includes(departementCode)\n            ? DEPARTEMENTS_ILE_DE_FRANCE\n            : departementCode;\n        }\n        return \"\";\n      } catch (error) {\n        console.error(\"Erreur lors de la détection du département :\", error);\n        return \"\";\n      }\n    }\n    // Pour les pays étrangers, on retourne le pays\n    return pays;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const localisation = await determinerLocalisation(\n      formData.ville,\n      formData.pays\n    );\n\n    if (localisation) {\n      const localisations = Array.isArray(localisation)\n        ? localisation\n        : [localisation];\n\n      const nouvelleEntreprise = {\n        nom: formData.nom,\n        poste: formData.poste,\n        ville: formData.ville,\n        departement: localisations[0], // Garder le premier département/pays pour l'affichage\n        pays: formData.pays,\n      };\n\n      ajouterEntreprise(nouvelleEntreprise);\n\n      // Réinitialiser le formulaire\n      setFormData({\n        nom: \"\",\n        poste: \"\",\n        ville: \"\",\n        departement: \"\",\n        pays: \"France\",\n      });\n    } else {\n      alert(\"Impossible de détecter la localisation pour cette ville.\");\n    }\n  };\n\n  // Calcul du nombre d'entreprises par département/pays\n  const entreprisesParLocalisation = entreprises.reduce((acc, entreprise) => {\n    const key =\n      entreprise.pays === \"France\" ? entreprise.departement : entreprise.pays;\n    acc[key] = (acc[key] || 0) + 1;\n    return acc;\n  }, {});\n\n  // Obtenir les départements uniques avec gestion spéciale pour l'Île-de-France\n  const departementsPourCarte = [\n    ...new Set(\n      Object.keys(entreprisesParLocalisation)\n        .filter(\n          (key) => [\"75\", \"92\", \"93\", \"94\"].includes(key) || key === \"France\"\n        )\n        .flatMap((dept) =>\n          [\"75\", \"92\", \"93\", \"94\"].includes(dept)\n            ? DEPARTEMENTS_ILE_DE_FRANCE\n            : [dept]\n        )\n    ),\n  ];\n\n  // Séparer les entreprises françaises et internationales\n  const entreprisesFrancaises = entreprises.filter((e) => e.pays === \"France\");\n  const entreprisesInternationales = entreprises.filter(\n    (e) => e.pays !== \"France\"\n  );\n\n  return (\n    <div className=\"App\">\n      <section>\n        <h1>Ma carte interactive</h1>\n        <France departements={departementsPourCarte} selectedColor=\"#007bff\" />\n      </section>\n      <section>\n        <form onSubmit={handleSubmit}>\n          <div>\n            <label>Nom de l'entreprise :</label>\n            <input\n              type=\"text\"\n              name=\"nom\"\n              value={formData.nom}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div>\n            <label>Ville :</label>\n            <input\n              type=\"text\"\n              name=\"ville\"\n              value={formData.ville}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div>\n            <label>Poste :</label>\n            <input\n              type=\"text\"\n              name=\"poste\"\n              value={formData.poste}\n              onChange={handleChange}\n              required\n            />\n          </div>\n\n          <div>\n            <label>Pays :</label>\n            <select\n              name=\"pays\"\n              value={formData.pays}\n              onChange={handleChange}\n              required>\n              <option value=\"France\">France</option>\n              <option value=\"Suisse\">Suisse</option>\n              <option value=\"Belgique\">Belgique</option>\n              {/* Ajoutez d'autres pays selon vos besoins */}\n            </select>\n          </div>\n\n          <button type=\"submit\">Ajouter</button>\n          <button type=\"button\" onClick={supprimerToutesEntreprises}>\n            Supprimer toutes les entreprises\n          </button>\n        </form>\n\n        <h2>Entreprises françaises</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Ville</th>\n              <th>Poste</th>\n              <th>Département</th>\n            </tr>\n          </thead>\n          <tbody>\n            {entreprisesFrancaises.map((entreprise, index) => (\n              <tr key={index}>\n                <td>{entreprise.nom}</td>\n                <td>{entreprise.ville}</td>\n                <td>{entreprise.poste}</td>\n                <td>\n                  {entreprise.departement +\n                    \" (\" +\n                    entreprisesParLocalisation[entreprise.departement] +\n                    \")\"}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n        <h2>Entreprises internationales</h2>\n        <table>\n          <thead>\n            <tr>\n              <th>Nom</th>\n              <th>Ville</th>\n              <th>Pays</th>\n              <th>Poste</th>\n            </tr>\n          </thead>\n          <tbody>\n            {entreprisesInternationales.map((entreprise, index) => (\n              <tr key={index}>\n                <td>{entreprise.nom}</td>\n                <td>{entreprise.ville}</td>\n                <td>{entreprise.pays}</td>\n                <td>{entreprise.poste}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </section>\n    </div>\n  );\n}\n\n// Encapsuler l'application avec le fournisseur du contexte\nexport default function AppWrapper() {\n  return (\n    <EntreprisesProvider>\n      <App />\n    </EntreprisesProvider>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}